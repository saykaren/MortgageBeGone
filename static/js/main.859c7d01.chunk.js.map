{"version":3,"sources":["Components/Assests/sayKaren_logo-white_8.1.2019.png","Components/App/Footer.tsx","Components/App/TotalAmountAnalysis.tsx","Components/App/GraphAnalysis.tsx","Components/App/TimeAnalysis.tsx","Components/App/DataAnalysis.tsx","Components/App/NumberConverter.tsx","Components/App/GenerateCalculation.tsx","Components/App/ExtraPaymentCalculation.tsx","Components/App/AmortizationColumnSetValue.tsx","Components/App/AmortizationColumn.tsx","Components/App/InputLabelOne.tsx","Components/App/Modal.tsx","Components/App/DataCalculate.tsx","Components/App/App.tsx","serviceWorker.js","index.js"],"names":["module","exports","Footer","id","className","href","target","rel","src","sayKarenLogo","alt","TotalAmountAnalysis","loan","principalWidth","intTotal","interestWidth","overallTotal","toFixed","GraphAnalysis","totalPaidData","graphPWidth","graphIWidth","style","height","backgroundColor","border","color","display","justifyContent","TimeAnalysis","title","arr","Math","floor","length","DataAnalysis","interestPaidArray","mortgage","extraInterestPaidArray","extraTotalPaidToBank","totalPaidToBank","totalPaid","extraTotalPaid","extraInterestWidth","extraPrincipalWidth","numberConverter","value","parseFloat","GenerateCalculation","newEndingPrincipalArray","interestRate","monthlyPayment","principalPaidArray","setPrincipalPaidArray","setInterestPaidArray","setNewEndingPrincipalArray","principal","currentPrincipal","NumberConverter","processEachPayment","num","principalPaid","paymentInterestPaid","balance","ExtraPaymentCalculation","currentExtraPrincipal","extraNewEndingPrincipalArray","setModal","extraPayment","extraPrincipalPaidArray","setExtraPrincipalPaidArray","setExtraInterestPaidArray","setExtraNewEndingPrincipalArray","processEachExtraPayment","principalExtraPaid","paymentExtraInterestPaid","extraBalance","AmortizationColumnSetValue","copyValue","map","index","key","AmortizationColumn","initialRow","InputLabelOne","handleReset","arrayCheck","setProperty","undefined","type","name","onChange","e","currentTarget","Modal","savedYears","savedMonths","savedTotalPaid","onClick","DataCalculate","useState","setPrincipal","setInterestRate","setMonthlyPayment","setExtraPayment","modal","handleGenerateCalculation","handleGenerateExtraCalculation","setEvent","useEffect","setTimeout","reduce","acc","window","location","reload","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.859c7d01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sayKaren_logo-white_8.1.2019.d0827d01.png\";","import React from 'react';\nimport sayKarenLogo from '../Assests/sayKaren_logo-white_8.1.2019.png';\n\nconst Footer= ()=> (\n    <footer\n        id=\"footer\"\n        className=\"footerDetails\"\n    >\n        Website created by:\n        <a\n            href=\"http://saykaren.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            <img src={sayKarenLogo}\n                 className=\"footerDetails\"\n                 id=\"sayKarenLogo\"\n                 alt=\"sayKaren.com\"\n            />\n        </a>\n    </footer>\n\n\n);\n\nexport default Footer","import React from 'react';\n\ninterface TotalAmountAnalysisProps {\n  loan: number;\n  principalWidth: number;\n  intTotal: number;\n  interestWidth: number;\n  overallTotal: number;\n}\n\nconst TotalAmountAnalysis = ({\n  loan,\n  principalWidth,\n  intTotal,\n  interestWidth,\n  overallTotal,\n}: TotalAmountAnalysisProps) => {\n  return (\n    <div className=\"dataSection\">\n      <div className=\"amounts\">\n        Loan Amount: ${loan} ({principalWidth.toFixed(2)}%)\n      </div>\n      <div className=\"amounts\">\n        Total Interest Paid:{' '}\n        <span className=\"negative\">\n          ${intTotal.toFixed(2)} ({interestWidth.toFixed(2)}%)\n        </span>\n      </div>\n      <div className=\"amounts\">\n        Total Paid:{' '}\n        <span className=\"negative\"> ${overallTotal.toFixed(2)}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default TotalAmountAnalysis;\n","import React from 'react';\n\ninterface GraphAnalysisProps {\n  totalPaidData: number;\n  graphPWidth: number;\n  graphIWidth: number;\n}\n\nconst GraphAnalysis = ({\n  totalPaidData,\n  graphPWidth,\n  graphIWidth,\n}: GraphAnalysisProps) => {\n  return (\n    <div className=\"dataSection\">\n      <div className=\"negative\">Total Paid ${totalPaidData.toFixed(2)}</div>\n      <div className=\"growGraph\">\n        <div\n          id=\"principalBar\"\n          className=\"detailsColumn\"\n          style={{\n            height: `${graphPWidth / 2}%`,\n            backgroundColor: '#61dafb',\n            border: '2px solid white',\n            color: '#282c34',\n          }}\n        >\n          {graphPWidth.toFixed(2)}%\n        </div>\n        <div\n          id=\"interestPaid\"\n          className=\"detailsColumn\"\n          style={{\n            height: `${graphIWidth / 2}%`,\n            backgroundColor: 'red',\n            border: '2px solid white',\n            color: '#282c34',\n          }}\n        >\n          {graphIWidth.toFixed(2)}%\n        </div>\n      </div>\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <div>Principal</div>\n        <div className=\"negative\">Interest</div>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphAnalysis;\n","import React from 'react';\n\ninterface TimeAnalysisProps {\n  title: string;\n  arr: number[];\n}\n\nconst TimeAnalysis = ({ title, arr }: TimeAnalysisProps) => {\n  return (\n    <div className=\"title\">\n      {title}\n      <br />\n      <div className=\"positiveLarge\">\n        {Math.floor(arr.length / 12)} years {arr.length % 12} months\n      </div>\n      ({arr.length} months)\n    </div>\n  );\n};\n\nexport default TimeAnalysis;\n","import React from 'react';\nimport TotalAmountAnalysis from './TotalAmountAnalysis';\nimport GraphAnalysis from './GraphAnalysis';\nimport TimeAnalysis from './TimeAnalysis';\n\ninterface DataAnaylsisProps {\n  interestPaidArray: number[];\n  mortgage: number;\n  extraInterestPaidArray: number[];\n  extraTotalPaidToBank: number;\n  totalPaidToBank: number;\n}\n\nconst DataAnalysis = ({\n  interestPaidArray,\n  mortgage,\n  extraInterestPaidArray,\n  extraTotalPaidToBank,\n  totalPaidToBank,\n}: DataAnaylsisProps) => {\n  const totalPaid = totalPaidToBank + mortgage;\n  const extraTotalPaid = extraTotalPaidToBank + mortgage;\n  let interestWidth = (totalPaidToBank / totalPaid) * 100;\n  let principalWidth = 100 - interestWidth;\n\n  let extraInterestWidth = (extraTotalPaidToBank / extraTotalPaid) * 100;\n  let extraPrincipalWidth = 100 - extraInterestWidth;\n\n  return (\n    <section>\n      {extraInterestPaidArray.length > 0 && (\n        <div className=\"dataForm\">\n          <h2 className=\"headerCalc\">\n            Amortization with <span className=\"positive\">Extra</span> Payment\n          </h2>\n          <div className=\"dataSection\">\n            <TimeAnalysis\n              title=\"Time til loan paid off\"\n              arr={extraInterestPaidArray}\n            />\n          </div>\n          <TotalAmountAnalysis\n            loan={mortgage}\n            principalWidth={extraPrincipalWidth}\n            intTotal={extraTotalPaidToBank}\n            interestWidth={extraInterestWidth}\n            overallTotal={extraTotalPaid}\n          />\n          <GraphAnalysis\n            totalPaidData={extraTotalPaid}\n            graphPWidth={extraPrincipalWidth}\n            graphIWidth={extraInterestWidth}\n          />\n        </div>\n      )}\n      {interestPaidArray.length > 0 && (\n        <div className=\"dataForm\">\n          <h2 className=\"headerCalc\">Amortization Typical Payment</h2>\n          <div className=\"dataSection\">\n            <TimeAnalysis\n              title=\"Time til loan paid off\"\n              arr={interestPaidArray}\n            />\n          </div>\n          <TotalAmountAnalysis\n            loan={mortgage}\n            principalWidth={principalWidth}\n            intTotal={totalPaidToBank}\n            interestWidth={interestWidth}\n            overallTotal={totalPaid}\n          />\n          <GraphAnalysis\n            totalPaidData={totalPaid}\n            graphPWidth={principalWidth}\n            graphIWidth={interestWidth}\n          />\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default DataAnalysis;\n","const numberConverter =(value: number) =>{\n    return parseFloat((value).toFixed(2));\n};\n\nexport default numberConverter;","import NumberConverter from './NumberConverter';\n\ninterface GenerateCalculationProps {\n    newEndingPrincipalArray: number[];\n    interestRate: number;\n    monthlyPayment: number;\n    principalPaidArray: number[];\n    setPrincipalPaidArray: ([])=>void;\n    interestPaidArray: number[];\n    setInterestPaidArray: ([])=>void;\n    setNewEndingPrincipalArray: ([])=>void;\n    principal: number;\n}\n\nconst GenerateCalculation = ({\n                                 newEndingPrincipalArray,\n                                 interestRate,\n                                 monthlyPayment,\n                                 principalPaidArray,\n                                 setPrincipalPaidArray,\n                                 interestPaidArray,\n                                 setInterestPaidArray,\n                                 setNewEndingPrincipalArray,\n                                 principal,\n                             }: GenerateCalculationProps) => {\n    let currentPrincipal = 0;\n    // let currentPrincipal;\n    if (newEndingPrincipalArray.length > 0) {\n        currentPrincipal = NumberConverter(\n            newEndingPrincipalArray[newEndingPrincipalArray.length - 1],\n        );\n    }\n\n    const processEachPayment = (num: number) => {\n        let paymentInterestPaid = NumberConverter(\n            currentPrincipal * ((interestRate * 0.01) / 12),\n        );\n        let principalPaid;\n        ////0 is last payment\n        if (num === 0) {\n            principalPaid = NumberConverter(currentPrincipal);\n        } else {\n            principalPaid = NumberConverter(monthlyPayment - paymentInterestPaid);\n        }\n        let balance = NumberConverter(currentPrincipal - principalPaid);\n        setPrincipalPaidArray([...principalPaidArray, principalPaid]);\n        setInterestPaidArray([...interestPaidArray, paymentInterestPaid]);\n        setNewEndingPrincipalArray([...newEndingPrincipalArray, balance]);\n    };\n\n    switch (true) {\n        case newEndingPrincipalArray[0] === 0:\n            setNewEndingPrincipalArray([principal]);\n            break;\n        case currentPrincipal > monthlyPayment &&\n        newEndingPrincipalArray.length >= 1:\n            processEachPayment(1);\n            break;\n        case currentPrincipal < monthlyPayment:\n            processEachPayment(0);\n            break;\n        case newEndingPrincipalArray[newEndingPrincipalArray.length - 1] <= 0:\n            break;\n        default:\n            break;\n    }\n};\n\nexport default GenerateCalculation;\n","\nimport NumberConverter from './NumberConverter';\n\ninterface ExtraPaymentCalculationProps {\n    extraNewEndingPrincipalArray: number[];\n    interestRate: number;\n    setModal: (arg: boolean)=>void;\n    extraPayment: number;\n    monthlyPayment: number;\n    extraPrincipalPaidArray: number[];\n    setExtraPrincipalPaidArray: ([])=>void;\n    extraInterestPaidArray: number[];\n    setExtraInterestPaidArray: ([])=>void;\n    setExtraNewEndingPrincipalArray: ([])=>void;\n    principal: number;\n}\n\nconst ExtraPaymentCalculation = ({\n                                     extraNewEndingPrincipalArray,\n                                     interestRate,\n                                     setModal,\n                                     extraPayment,\n                                     monthlyPayment,\n                                     extraPrincipalPaidArray,\n                                     setExtraPrincipalPaidArray,\n                                     extraInterestPaidArray,\n                                     setExtraInterestPaidArray,\n                                     setExtraNewEndingPrincipalArray,\n                                     principal,\n                                 } : ExtraPaymentCalculationProps) => {\n    let currentExtraPrincipal: any;\n    if (extraNewEndingPrincipalArray.length > 0) {\n        currentExtraPrincipal = NumberConverter(\n            extraNewEndingPrincipalArray[extraNewEndingPrincipalArray.length - 1],\n        );\n    }\n\n    const processEachExtraPayment = (num: number) => {\n        let paymentExtraInterestPaid = NumberConverter(\n            currentExtraPrincipal * ((interestRate * 0.01) / 12),\n        );\n        let principalExtraPaid;\n        ///Last payment 0\n        if (num === 0) {\n            principalExtraPaid = NumberConverter(currentExtraPrincipal);\n            setModal(true);\n        } else {\n            principalExtraPaid = NumberConverter(\n                extraPayment + monthlyPayment - paymentExtraInterestPaid,\n            );\n        }\n        let extraBalance = NumberConverter(\n            currentExtraPrincipal - principalExtraPaid,\n        );\n        setExtraPrincipalPaidArray([\n            ...extraPrincipalPaidArray,\n            principalExtraPaid,\n        ]);\n        setExtraInterestPaidArray([\n            ...extraInterestPaidArray,\n            paymentExtraInterestPaid,\n        ]);\n        setExtraNewEndingPrincipalArray([\n            ...extraNewEndingPrincipalArray,\n            extraBalance,\n        ]);\n    };\n\n    switch (true) {\n        case extraNewEndingPrincipalArray[0] ===0 :\n            setExtraNewEndingPrincipalArray([principal]);\n            break;\n        case currentExtraPrincipal > monthlyPayment + extraPayment &&\n        extraNewEndingPrincipalArray.length >= 1:\n            processEachExtraPayment(1);\n            break;\n        case currentExtraPrincipal < monthlyPayment + extraPayment &&\n        extraNewEndingPrincipalArray[extraNewEndingPrincipalArray.length - 1] > 0:\n            processEachExtraPayment(0);\n            break;\n        case extraNewEndingPrincipalArray[\n        extraNewEndingPrincipalArray.length - 1\n            ] <= 0:\n            break;\n        default:\n            break;\n    }\n};\n\nexport default ExtraPaymentCalculation;\n","import React from 'react';\n\ninterface AmortizationColumnSetValueProps {\n  title: string;\n  copyValue: number;\n  arr: number[];\n}\n\nconst AmortizationColumnSetValue = ({\n  title,\n  copyValue,\n  arr,\n}: AmortizationColumnSetValueProps) => {\n  return (\n    <div className=\"tableCell\">\n      {title}\n      {arr.map((value, index) => (\n        <div className=\"cellDetails\" key={index}>\n          {copyValue}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default AmortizationColumnSetValue;\n","import React from 'react';\n\ninterface AmortizationColumnProps {\n  title: string;\n  initialRow: string | number;\n  arr: number[];\n}\n\nconst AmortizationColumn = ({\n  title,\n  initialRow,\n  arr,\n}: AmortizationColumnProps) => {\n  return (\n    <div className=\"tableCell\">\n      {title}\n      <div className=\"cellDetails\">{initialRow}</div>\n      {arr.map((value, index) => (\n        <div className=\"cellDetails\" key={index}>\n          {value}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default AmortizationColumn;\n","import React from 'react';\n\ninterface InputLabelOneProps {\n  handleReset: (arg1: string, arg2: (arg1: number) => void) => void;\n  title: string;\n  arrayCheck?: number[];\n  value?: number;\n  setProperty: (arg1: number) => void;\n}\nconst InputLabelOne = ({\n  handleReset,\n  title,\n  arrayCheck,\n  value,\n  setProperty,\n}: InputLabelOneProps) => {\n  return (\n    <label className=\"inputSection\">\n      {title}:\n      {(arrayCheck !== undefined && arrayCheck.length <= 2 && (\n        <input\n          type=\"number\"\n          name=\"Mortgage\"\n          value={value}\n          onChange={(e) => handleReset(e.currentTarget.value, setProperty)}\n        ></input>\n      )) || <span>{value}</span>}\n    </label>\n  );\n};\n\nexport default InputLabelOne;\n","import React from 'react';\n\ninterface ModalProps {\n  savedYears: number;\n  savedMonths: number;\n  savedTotalPaid: number;\n  setModal: (arg1: boolean) => void;\n}\nconst Modal = ({\n  savedYears,\n  savedMonths,\n  savedTotalPaid,\n  setModal,\n}: ModalProps) => {\n  return (\n    <div className=\"modal\">\n      <h2 className=\"modal-header\">\n        <button className=\"modal-close\" onClick={() => setModal(false)}>\n          X\n        </button>\n        <span className=\"positiveLarge\">Savings!</span>\n      </h2>\n      <div className=\"modal-content\">\n        <div className=\"amounts positive\">\n          {savedYears} years {savedMonths} months Saved!\n        </div>\n        <div className=\"amounts positive\">${savedTotalPaid} Saved</div>\n      </div>\n    </div>\n  );\n};\nexport default Modal;\n","import React, { useState, useEffect, ChangeEvent, FC } from 'react';\nimport NumberConverter from './NumberConverter';\nimport DataAnalysis from './DataAnalysis';\nimport GenerateCalculation from './GenerateCalculation';\nimport ExtraPaymentCalculation from './ExtraPaymentCalculation';\nimport AmortizationColumnSetValue from './AmortizationColumnSetValue';\nimport AmortizationColumn from './AmortizationColumn';\nimport InputLabelOne from './InputLabelOne';\nimport Modal from './Modal';\n\nconst DataCalculate: React.FC = () => {\n  // User Input\n  const [principal, setPrincipal] = useState(172000);\n  const [interestRate, setInterestRate] = useState(3.75);\n  const [monthlyPayment, setMonthlyPayment] = useState(1500);\n  const [extraPayment, setExtraPayment] = useState(1000);\n\n  //Extra payment\n  const [extraPrincipalPaidArray, setExtraPrincipalPaidArray] = useState([0]);\n  const [extraInterestPaidArray, setExtraInterestPaidArray] = useState([0]);\n  const [\n    extraNewEndingPrincipalArray,\n    setExtraNewEndingPrincipalArray,\n  ] = useState<number[]>([0]);\n\n  //Update Input\n  const [principalPaidArray, setPrincipalPaidArray] = useState([0]);\n  const [interestPaidArray, setInterestPaidArray] = useState([0]);\n  const [newEndingPrincipalArray, setNewEndingPrincipalArray] = useState([0]);\n\n  // Modal\n  const [modal, setModal] = useState<boolean>(false);\n\n  //Calculations\n  interface handleGenerateCalculationProps {\n    newEndingPrincipalArray: [];\n    interestRate: number;\n    monthlyPayment: number;\n    principalPaidArray: number[];\n    setPrincipalPaidArray: ([]) => void;\n    interestPaidArray: number[];\n    setInterestPaidArray: number[];\n    setNewEndingPrincipalArray: ([]) => void;\n    principal: number;\n  }\n\n  const handleGenerateCalculation = () => {\n    GenerateCalculation({\n      newEndingPrincipalArray,\n      interestRate,\n      monthlyPayment,\n      principalPaidArray,\n      setPrincipalPaidArray,\n      interestPaidArray,\n      setInterestPaidArray,\n      setNewEndingPrincipalArray,\n      principal,\n    });\n  };\n\n  const handleGenerateExtraCalculation = () => {\n    ExtraPaymentCalculation({\n      extraNewEndingPrincipalArray,\n      interestRate,\n      setModal,\n      extraPayment,\n      monthlyPayment,\n      extraPrincipalPaidArray,\n      setExtraPrincipalPaidArray,\n      extraInterestPaidArray,\n      setExtraInterestPaidArray,\n      setExtraNewEndingPrincipalArray,\n      principal,\n    });\n  };\n\n  const handleReset = (e: string, setEvent: (arg1: number) => void) => {\n    let result = parseFloat(e);\n    setEvent(result);\n  };\n\n  useEffect(() => {\n    if (\n      newEndingPrincipalArray.length >= 1 &&\n      newEndingPrincipalArray[newEndingPrincipalArray.length - 1] > 0\n    ) {\n      setTimeout(handleGenerateCalculation, 100);\n    }\n  }, [newEndingPrincipalArray]);\n\n  useEffect(() => {\n    if (\n      extraNewEndingPrincipalArray.length >= 1 &&\n      extraNewEndingPrincipalArray[extraNewEndingPrincipalArray.length - 1] > 0\n    ) {\n      setTimeout(handleGenerateExtraCalculation, 100);\n    }\n  }, [extraNewEndingPrincipalArray]);\n\n  const calculate = () => {\n    handleGenerateCalculation();\n    if (extraPayment > 0) {\n      handleGenerateExtraCalculation();\n    }\n  };\n\n  //Calculate total paid\n  let totalPaidToBank = 0;\n  let extraTotalPaidToBank = 0;\n\n  if (interestPaidArray.length > 0) {\n    totalPaidToBank = interestPaidArray.reduce(function(acc, num) {\n      return acc + num;\n    }, 0);\n  }\n  if (extraInterestPaidArray.length > 0) {\n    extraTotalPaidToBank = extraInterestPaidArray.reduce(function(acc, num) {\n      return acc + num;\n    }, 0);\n  }\n\n  let savedYears = Math.floor(\n    (interestPaidArray.length - extraInterestPaidArray.length) / 12,\n  );\n  let savedMonths =\n    (interestPaidArray.length - extraInterestPaidArray.length) % 12;\n\n  let savedTotalPaid = Math.floor(totalPaidToBank - extraTotalPaidToBank);\n\n  return (\n    <section className=\"App\">\n      {modal && (\n        <Modal\n          savedYears={savedYears}\n          savedMonths={savedMonths}\n          setModal={setModal}\n          savedTotalPaid={savedTotalPaid}\n        />\n      )}\n      <div id=\"inputSection\">\n        <form className=\"inputForm\">\n          <InputLabelOne\n            handleReset={handleReset}\n            title={'Mortgage Checking'}\n            arrayCheck={newEndingPrincipalArray}\n            value={principal}\n            setProperty={setPrincipal}\n          />\n          <InputLabelOne\n            handleReset={handleReset}\n            title={'Interest Rate'}\n            arrayCheck={newEndingPrincipalArray}\n            value={interestRate}\n            setProperty={setInterestRate}\n          />\n          <InputLabelOne\n            handleReset={handleReset}\n            title={'Monthly Payment'}\n            arrayCheck={newEndingPrincipalArray}\n            value={monthlyPayment}\n            setProperty={setMonthlyPayment}\n          />\n          <InputLabelOne\n            handleReset={handleReset}\n            title={'Extra Monthly Payment'}\n            arrayCheck={newEndingPrincipalArray}\n            value={extraPayment}\n            setProperty={setExtraPayment}\n          />\n        </form>\n      </div>\n      {(newEndingPrincipalArray[newEndingPrincipalArray.length - 1] <= 1 ||\n        newEndingPrincipalArray[newEndingPrincipalArray.length - 1] ===\n          undefined) && <button onClick={() => calculate()}>Calculate</button>}\n      <button onClick={() => window.location.reload()}>Reset Numbers</button>\n\n      {newEndingPrincipalArray.length > 2 && (\n        <DataAnalysis\n          interestPaidArray={interestPaidArray}\n          mortgage={principal}\n          extraInterestPaidArray={extraInterestPaidArray}\n          extraTotalPaidToBank={extraTotalPaidToBank}\n          totalPaidToBank={totalPaidToBank}\n        />\n      )}\n\n      {extraNewEndingPrincipalArray.length > 2 && (\n        <div id=\"flexTable\">\n          <AmortizationColumn\n            title=\"Extra Principal\"\n            initialRow={principal}\n            arr={extraNewEndingPrincipalArray}\n          />\n          <AmortizationColumnSetValue\n            title=\"Monthly Payment\"\n            copyValue={monthlyPayment}\n            arr={extraNewEndingPrincipalArray}\n          />\n          <AmortizationColumn\n            title=\"Interest Paid (EXTRA Calculation)\"\n            initialRow=\"\"\n            arr={extraInterestPaidArray}\n          />\n          <AmortizationColumn\n            title=\"Principal Paid (EXTRA Calculation)\"\n            initialRow=\"\"\n            arr={extraPrincipalPaidArray}\n          />\n          <AmortizationColumn\n            title=\"Ending Principal (EXTRA Calculation)\"\n            initialRow=\"\"\n            arr={extraNewEndingPrincipalArray}\n          />\n        </div>\n      )}\n\n      <div id=\"flexTable\">\n        <AmortizationColumn\n          title=\"Principal\"\n          initialRow={principal}\n          arr={newEndingPrincipalArray}\n        />\n        <AmortizationColumnSetValue\n          title={'Monthly Payment'}\n          copyValue={monthlyPayment}\n          arr={newEndingPrincipalArray}\n        />\n        <AmortizationColumn\n          title=\"Interest Paid\"\n          initialRow=\"\"\n          arr={interestPaidArray}\n        />\n        <AmortizationColumn\n          title=\"Principal Paid\"\n          initialRow=\"\"\n          arr={principalPaidArray}\n        />\n        <AmortizationColumn\n          title=\"Ending Principal\"\n          initialRow=\"\"\n          arr={newEndingPrincipalArray}\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default DataCalculate;\n","import React, { useState } from 'react';\nimport '../Styling/App.scss';\nimport Footer from './Footer';\nimport DataCalculate from './DataCalculate';\n\nfunction App() {\n  return (\n    <>\n      <DataCalculate />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}